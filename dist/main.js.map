{"version":3,"sources":["webpack://ensemble/webpack/runtime/make namespace object","webpack://ensemble/./src/js/theme-switcher.js"],"names":["exports","Symbol","toStringTag","Object","defineProperty","value","document","addEventListener","storedMode","window","localStorage","getItem","setState","state","body","classList","remove","add","setItem","pick_elt","checked","pick_elts","forEach","t","getAttribute","darkmode","selector","parent","querySelector","Array","prototype","slice","call","querySelectorAll"],"mappings":";mBACwB,CAACA,IACH,oBAAXC,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeJ,EAASC,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeJ,EAAS,aAAc,CAAEK,OAAO,K,WCavDC,SAASC,iBAAiB,oBAAoB,YAI9C,WAEE,MAAMC,EAAaC,OAAOC,aAAaC,QAAQ,YAQ/C,SAASC,EAASC,GAChBP,SAASQ,KAAKC,UAAUC,OAAO,QAAS,QAC1B,SAAVH,GAAkBP,SAASQ,KAAKC,UAAUE,IAAIJ,GAClDJ,OAAOC,aAAaQ,QAAQ,WAAYL,GARtCL,GACFW,EAAS,8BAA8BX,OAAgBY,SAAU,EACjER,EAASJ,IACJI,EAAS,QAQhBS,EAAU,uBAAuBC,SAASC,IACxCA,EAAEhB,iBAAiB,SAAS,KACtBgB,EAAEH,SAASR,EAASW,EAAEC,aAAa,gBArB3CC,MAiCF,IAAIN,EAAW,SAAUO,EAAUC,GACjC,OAAQA,GAAkBrB,UAAUsB,cAAcF,IAUhDL,EAAY,SAAUK,EAAUC,GAClC,OAAOE,MAAMC,UAAUC,MAAMC,MAAML,GAAkBrB,UAAU2B,iBAAiBP,M","file":"main.js","sourcesContent":["// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","'use strict';\n\n/* From Colin Fahrion (https://codepen.io/colinaut/pen/dyNpdOV) */\n\n/* Button markup to be inserted (widget or â€¦)\n<div id=\"theme-toggle\" data-state=\"auto\">\n  <label>\n  <input value=\"light\" name=\"state-d\" type=\"radio\" /> <span>Clair</span>\n  </label>\n  <label>\n    <input value=\"auto\" name=\"state-d\" type=\"radio\" checked /> <span>Auto</span>\n  </label>\n  <label>\n    <input value=\"dark\" name=\"state-d\" type=\"radio\" /> <span>Sombre</span>\n  </label>\n</div>\n*/\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  darkmode();\n});\n\nfunction darkmode() {\n  // Grab state from localStorage\n  const storedMode = window.localStorage.getItem('darkmode');\n\n  // setState based on stored mode or set to auto\n  if (storedMode) {\n    pick_elt(`#theme-toggle input[value='${storedMode}']`).checked = true;\n    setState(storedMode);\n  } else setState('auto');\n\n  function setState(state) {\n    document.body.classList.remove('light', 'dark');\n    if (state !== 'auto') document.body.classList.add(state);\n    window.localStorage.setItem('darkmode', state);\n  }\n\n  pick_elts('#theme-toggle input').forEach((t) => {\n    t.addEventListener('click', () => {\n      if (t.checked) setState(t.getAttribute('value'));\n    });\n  });\n}\n\n/*!\n * Get the first matching element in the DOM\n * (c) 2019 Chris Ferdinandi, MIT License, https://gomakethings.com\n * @param  {String} selector The element selector\n * @param  {Node}   parent   The parent to search in [optional]\n * @return {Node}            The element\n */\nvar pick_elt = function (selector, parent) {\n  return (parent ? parent : document).querySelector(selector);\n};\n\n/*!\n * Get an array of all matching elements in the DOM\n * (c) 2019 Chris Ferdinandi, MIT License, https://gomakethings.com\n * @param  {String} selector The element selector\n * @param  {Node}   parent   The parent to search in [optional]\n * @return {Array}           Th elements\n */\nvar pick_elts = function (selector, parent) {\n  return Array.prototype.slice.call((parent ? parent : document).querySelectorAll(selector));\n};\n"],"sourceRoot":""}